Parameters:
  Environment:
    Type: String
  Region:
    Type: String
    Default: "us-east-1"
  CidrBlock:
    Type: String
    Default: "10.0.0.0/16"
  NGW:
    Type: String
    Default: "yes"
    AllowedValues:
      - "yes"
      - "no"

Conditions:
  CreateNatGateway: !Equals [!Ref NGW, "yes"]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlock
      Tags: [{ Key: Name, Value: !Join ["-", [!Ref Environment, !Ref Region]] }]
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: "us-east-1a"
      VpcId: !Ref VPC
      Tags: [{Key: Name, Value: !Join ["-", [!Ref Environment, "public", "1a"]]}]
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: "us-east-1b"
      VpcId: !Ref VPC
      Tags: [{Key: Name, Value: !Join ["-", [!Ref Environment, "public", "1b"]]}]
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: "us-east-1c"
      VpcId: !Ref VPC
      Tags: [{Key: Name, Value: !Join ["-", [!Ref Environment, "public", "1c"]]}]
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.4.0/24"
      AvailabilityZone: "us-east-1a"
      VpcId: !Ref VPC
      Tags: [{Key: Name, Value: !Join ["-", [!Ref Environment, "private", "1a"]]}]
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.5.0/24"
      AvailabilityZone: "us-east-1b"
      VpcId: !Ref VPC
      Tags: [{Key: Name, Value: !Join ["-", [!Ref Environment, "private", "1b"]]}]
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.6.0/24"
      AvailabilityZone: "us-east-1c"
      VpcId: !Ref VPC
      Tags: [{Key: Name, Value: !Join ["-", [!Ref Environment, "private", "1c"]]}]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: [{ Key: Name, Value: !Join ["-", [!Ref Environment, !Ref Region]] }]
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags: [{ Key: Name, Value: !Join ["-", [!Ref Environment, !Ref Region]] }]
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags: [{ Key: Name, Value: !Join ["-", [!Ref Environment, !Ref Region]] }]
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [{ Key: Name, Value: !Join ["-", [!Ref Environment, "public"]] }]
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
  PublicRouteTableAssociationSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicRouteTableAssociationSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PublicRouteTableAssociationSubnet3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [{ Key: Name, Value: !Join ["-", [!Ref Environment, "private"]] }]
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref PrivateRouteTable
      NatGatewayId: !Ref NatGateway
  PrivateRouteTableAssociationSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateRouteTableAssociationSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  PrivateRouteTableAssociationSubnet3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!Ref Environment, "public"]]
      GroupDescription: "Public Security Group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!Ref Environment, "private"]]
      GroupDescription: "Private Security Group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt PublicSecurityGroup.GroupId

Outputs:
  VPCId:
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  PublicSubnets:
    Value: !Join
      - ','
      - - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnets"
  PrivateSubnets:
    Value: !Join
      - ','
      - - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnets"
  PublicSecurityGroup:
    Value: !GetAtt PublicSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-PublicSecurityGroup"
  PrivateSecurityGroup:
    Value: !GetAtt PrivateSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSecurityGroup"

